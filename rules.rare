(declare-rare-rule or_true_bool ((@T0 Type) (t1 Bool) (t2 @T0 :list))
  :args (t1 t2)
  :premises ((= t1 true))
  :conclusion (= (or true t1 t2) true)
)
(declare-rare-rule arith-mul-one ((@T0 Type) (@T1 Type) (t1 @T0 :list) (s1 @T1 :list))
  :args (t1 s1)
  :conclusion (= (* t1 1 s1) (* t1 s1))
)
(declare-rare-rule arith-mul-zero ((@T0 Type) (@T1 Type) (t1 @T0 :list) (s1 @T1 :list))
  :args (t1 s1)
  :conclusion (= (* t1 0 s1) 0)
)
(declare-rare-rule arith-div-total-real ((@T0 Type) (t1 @T0) (s1 Real))
  :args (t1 s1)
  :premises ((= (= s1 0/1) false))
  :conclusion (= (/ t1 s1) (/_total t1 s1))
)
(declare-rare-rule uf-int2bv-bvult-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :args (t1 s1)
  :conclusion (= (bvult t1 s1) (< (bv2nat t1) (bv2nat s1)))
)