(assume a0 (= a b))
(assume a1 (= c d))
(assume a2 (and p1 true))
(assume a3 (or (not p1) (and p2 p3)))
(assume a4 (or (not p3) (not (= (f a c) (f b d)))))
(step t0 (cl p1) :rule and :premises (a2))
(step t1 (cl (not (and p2 p3)) p2) :rule and_pos)
(step t2 (cl p2 (not (and p2 p3))) :rule reordering :premises (t1))
(step t3 (cl (not (and p2 p3)) p3) :rule and_pos)
(step t4 (cl p3 (not (and p2 p3))) :rule reordering :premises (t3))
(step t5 (cl (and p2 p3) (not p2) (not p3)) :rule and_neg)
(step t6 (cl (and p2 p3) (not p3) (not p2)) :rule reordering :premises (t5))
(step t7 (cl (not (= a b)) (not (= c d)) (= (f a c) (f b d))) :rule eq_congruent)
(step t8 (cl (= (f a c) (f b d)) (not (= a b)) (not (= c d))) :rule reordering :premises (t7))
(step t9 (cl) :rule drat :premises (a0 a1 a3 a4 t0 t2 t4 t8) :args ((cl (and p2 p3)) (@d (cl (not p1) (and p2 p3))) (cl p2) (cl p3) (cl (not (= (f a c) (f b d)))) (cl)))