(declare-rare-rule and-true-left  ((x Bool)) :args (x)
  :conclusion (= (and true  x) x))

(declare-rare-rule and-true-right ((x Bool)) :args (x)
  :conclusion (= (and x true)  x))

(declare-rare-rule and-false-left ((x Bool)) :args (x)
  :conclusion (= (and false x) false))

(declare-rare-rule and-false-right ((x Bool)) :args (x)
  :conclusion (= (and x false) false))

(declare-rare-rule or-false-left  ((x Bool)) :args (x)
  :conclusion (= (or false x) x))

(declare-rare-rule or-false-right ((x Bool)) :args (x)
  :conclusion (= (or x false) x))

(declare-rare-rule or-true-left  ((x Bool)) :args (x)
  :conclusion (= (or true  x) true))

(declare-rare-rule or-true-right ((x Bool)) :args (x)
  :conclusion (= (or x true)  true))

(declare-rare-rule and-idem ((x Bool)) :args (x)
  :conclusion (= (and x x) x))

(declare-rare-rule or-idem  ((x Bool)) :args (x)
  :conclusion (= (or  x x) x))

(declare-rare-rule absorption-and ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (and x (or x y)) x))

(declare-rare-rule absorption-or  ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (or  x (and x y)) x))

(declare-rare-rule and-compl-left ((x Bool)) :args (x)
  :conclusion (= (and x (not x)) false))

(declare-rare-rule and-compl-right ((x Bool)) :args (x)
  :conclusion (= (and (not x) x) false))

(declare-rare-rule or-compl-left ((x Bool)) :args (x)
  :conclusion (= (or x (not x)) true))

(declare-rare-rule or-compl-right ((x Bool)) :args (x)
  :conclusion (= (or (not x) x) true))

(declare-rare-rule double-neg ((x Bool)) :args (x)
  :conclusion (= (not (not x)) x))

(declare-rare-rule demorgan-and ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (not (and x y))
                 (or (not x) (not y))))

(declare-rare-rule demorgan-or ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (not (or x y))
                 (and (not x) (not y))))

(declare-rare-rule not-elim  ((x Bool) ) :args (x)
  :premises ((= x true))
  :conclusion (= (not true)  false))

(declare-rare-rule not-false ((x Bool) ) :args (x)
  :premises ((= x false))
  :conclusion (= (not false) true))

(declare-rare-rule and-comm ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (and x y) (and y x)))

(declare-rare-rule or-comm  ((x Bool) (y Bool)) :args (x y)
  :conclusion (= (or x y) (or y x)))

(declare-rare-rule symmetry ((t1 Bool) (t2 Bool))
  :args (t1 t2)
  :premises ((= t1 t2))
  :conclusion (= t2 t1)
)
(declare-rare-rule eq_refl ((t1 Bool))
  :args (t1)
  :conclusion (= t1 t1)
)
(declare-rare-rule eq_trans ((t1 Bool) (t2 Bool) (t3 Bool))
  :args (t1 t2 t3)
  :premises ((= t1 t2) (= t2 t3))
  :conclusion (= t1 t3)
)
