
use std::sync::LazyLock;

// AUTO-GENERATED rules with explicit sort-suffixed names for polymorphic operators
use egg::*;
use super::language::Rare;

pub static BUILTIN_RULES: LazyLock<Vec<Rewrite<Rare, ()>>> = LazyLock::new(|| vec![
        rewrite!("not-inst-ground"; "(Ground (App (Op not) ?x))" => "(Ground (App (Op not) (Ground ?x)))"),
        rewrite!("not-inst"; "(Ground (App (Op not) (Inhabitant ?a ?x (Sort Bool))))" => "(Inhabitant ?a (App (Op not) ?x) (Sort Bool))"),
        rewrite!("not-any"; "any" => "(Inhabitant Free (App (Op not) (Ground any)) (Sort Bool))"),
        rewrite!("bv_not-inst-ground"; "(Ground (App (Op bv_not) ?x))" => "(Ground (App (Op bv_not) (Ground ?x)))"),
        rewrite!("bv_not-inst"; "(Ground (App (Op bv_not) (Inhabitant ?a ?x (Sort Bool))))" => "(Inhabitant ?a (App (Op bv_not) ?x) (Sort Bool))"),
        rewrite!("bv_not-any"; "any" => "(Inhabitant Free (App (Op bv_not) (Ground any)) (Sort Bool))"),
        rewrite!("bv_neg-inst-ground"; "(Ground (App (Op bv_neg) ?x))" => "(Ground (App (Op bv_neg) (Ground ?x)))"),
        rewrite!("bv_neg-inst"; "(Ground (App (Op bv_neg) (Inhabitant ?a ?x (Sort Bool))))" => "(Inhabitant ?a (App (Op bv_neg) ?x) (Sort Bool))"),
        rewrite!("bv_neg-any"; "any" => "(Inhabitant Free (App (Op bv_neg) (Ground any)) (Sort Bool))"),
        // rewrite!("and-inst-ground"; "(Ground (App (Op and) ?xs))" => "(Ground (App (Op and) (GroundList ?xs)))"),
        // rewrite!("and-inst"; "(Ground (App (Op and) ?left (Inhabitant ?a ?mid (Sort Bool)) ?right))" => "(Inhabitant ?a (App (Op and) ?left ?mid ?right) (Sort Bool))"),
        // rewrite!("and-any"; "any" => "(Inhabitant Free (App (Op and) (Ground any) (Ground any)) (Sort Bool))"),
        // rewrite!("or-inst-ground"; "(Ground (App (Op or) ?xs))" => "(Ground (App (Op or) (GroundList ?xs)))"),
        // rewrite!("or-inst"; "(Ground (App (Op or) ?left (Inhabitant ?a ?mid (Sort Bool)) ?right))" => "(Inhabitant ?a (App (Op or) ?left ?mid ?right) (Sort Bool))"),
        // rewrite!("or-any"; "any" => "(Inhabitant Free (App (Op or) (Ground any) (Ground any)) (Sort Bool))"),
        // rewrite!("xor-inst-ground"; "(Ground (App (Op xor) ?xs))" => "(Ground (App (Op xor) (GroundList ?xs)))"),
        // rewrite!("xor-inst"; "(Ground (App (Op xor) ?left (Inhabitant ?a ?mid (Sort Bool)) ?right))" => "(Inhabitant ?a (App (Op xor) ?left ?mid ?right) (Sort Bool))"),
        // rewrite!("xor-any"; "any" => "(Inhabitant Free (App (Op xor) (Ground any) (Ground any)) (Sort Bool))"),
        // rewrite!("implies-inst-ground"; "(Ground (App (Op implies) ?xs))" => "(Ground (App (Op implies) (GroundList ?xs)))"),
        rewrite!("implies-inst"; "(Ground (App (Op implies) ?left (Inhabitant ?a ?mid (Sort Bool)) ?right))" => "(Inhabitant ?a (App (Op implies) ?left ?mid ?right) (Sort Bool))"),
        rewrite!("implies-any"; "any" => "(Inhabitant Free (App (Op implies) (Ground any) (Ground any)) (Sort Bool))"),
        
        rewrite!("~-inst-ground"; "(Ground (~ ?x ?y))" => "(Ground (~ (Ground ?x) (Ground ?y)))"),
        rewrite!("~-inst"; "(Ground (~ (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (~ ?x ?y) (Sort Bool))"),
        rewrite!("~-any"; "any" => "(Inhabitant Free (~ (Ground any) (Ground any)) (Sort Bool))"),

        rewrite!("distinct-inst-ground"; "(Ground (App (Op distinct) ?x ?y))" => "(Ground (App (Op distinct) (Ground ?x) (Ground ?y)))"),
        rewrite!("distinct-inst"; "(Ground (App (Op distinct) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op distinct) ?x ?y) (Sort Bool))"),
        rewrite!("distinct-any"; "any" => "(Inhabitant Free (App (Op distinct) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("lessThan-inst-ground"; "(Ground (App (Op lessThan) ?x ?y))" => "(Ground (App (Op lessThan) (Ground ?x) (Ground ?y)))"),
        rewrite!("lessThan-inst"; "(Ground (App (Op lessThan) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op lessThan) ?x ?y) (Sort Bool))"),
        rewrite!("lessThan-any"; "any" => "(Inhabitant Free (App (Op lessThan) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("lessEq-inst-ground"; "(Ground (App (Op lessEq) ?x ?y))" => "(Ground (App (Op lessEq) (Ground ?x) (Ground ?y)))"),
        rewrite!("lessEq-inst"; "(Ground (App (Op lessEq) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op lessEq) ?x ?y) (Sort Bool))"),
        rewrite!("lessEq-any"; "any" => "(Inhabitant Free (App (Op lessEq) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("greaterThan-inst-ground"; "(Ground (App (Op greaterThan) ?x ?y))" => "(Ground (App (Op greaterThan) (Ground ?x) (Ground ?y)))"),
        rewrite!("greaterThan-inst"; "(Ground (App (Op greaterThan) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op greaterThan) ?x ?y) (Sort Bool))"),
        rewrite!("greaterThan-any"; "any" => "(Inhabitant Free (App (Op greaterThan) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("greaterEq-inst-ground"; "(Ground (App (Op greaterEq) ?x ?y))" => "(Ground (App (Op greaterEq) (Ground ?x) (Ground ?y)))"),
        rewrite!("greaterEq-inst"; "(Ground (App (Op greaterEq) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op greaterEq) ?x ?y) (Sort Bool))"),
        rewrite!("greaterEq-any"; "any" => "(Inhabitant Free (App (Op greaterEq) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("strLessThan-inst-ground"; "(Ground (App (Op strLessThan) ?x ?y))" => "(Ground (App (Op strLessThan) (Ground ?x) (Ground ?y)))"),
        rewrite!("strLessThan-inst"; "(Ground (App (Op strLessThan) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op strLessThan) ?x ?y) (Sort Bool))"),
        rewrite!("strLessThan-any"; "any" => "(Inhabitant Free (App (Op strLessThan) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("strLessEq-inst-ground"; "(Ground (App (Op strLessEq) ?x ?y))" => "(Ground (App (Op strLessEq) (Ground ?x) (Ground ?y)))"),
        rewrite!("strLessEq-inst"; "(Ground (App (Op strLessEq) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op strLessEq) ?x ?y) (Sort Bool))"),
        rewrite!("strLessEq-any"; "any" => "(Inhabitant Free (App (Op strLessEq) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("prefixOf-inst-ground"; "(Ground (App (Op prefixOf) ?x ?y))" => "(Ground (App (Op prefixOf) (Ground ?x) (Ground ?y)))"),
        rewrite!("prefixOf-inst"; "(Ground (App (Op prefixOf) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op prefixOf) ?x ?y) (Sort Bool))"),
        rewrite!("prefixOf-any"; "any" => "(Inhabitant Free (App (Op prefixOf) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("suffixOf-inst-ground"; "(Ground (App (Op suffixOf) ?x ?y))" => "(Ground (App (Op suffixOf) (Ground ?x) (Ground ?y)))"),
        rewrite!("suffixOf-inst"; "(Ground (App (Op suffixOf) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op suffixOf) ?x ?y) (Sort Bool))"),
        rewrite!("suffixOf-any"; "any" => "(Inhabitant Free (App (Op suffixOf) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("contains-inst-ground"; "(Ground (App (Op contains) ?x ?y))" => "(Ground (App (Op contains) (Ground ?x) (Ground ?y)))"),
        rewrite!("contains-inst"; "(Ground (App (Op contains) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op contains) ?x ?y) (Sort Bool))"),
        rewrite!("contains-any"; "any" => "(Inhabitant Free (App (Op contains) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("reRange-inst-ground"; "(Ground (App (Op reRange) ?x ?y))" => "(Ground (App (Op reRange) (Ground ?x) (Ground ?y)))"),
        rewrite!("reRange-inst"; "(Ground (App (Op reRange) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op reRange) ?x ?y) (Sort Bool))"),
        rewrite!("reRange-any"; "any" => "(Inhabitant Free (App (Op reRange) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvULt-inst-ground"; "(Ground (App (Op bvULt) ?x ?y))" => "(Ground (App (Op bvULt) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvULt-inst"; "(Ground (App (Op bvULt) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvULt) ?x ?y) (Sort Bool))"),
        rewrite!("bvULt-any"; "any" => "(Inhabitant Free (App (Op bvULt) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvULe-inst-ground"; "(Ground (App (Op bvULe) ?x ?y))" => "(Ground (App (Op bvULe) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvULe-inst"; "(Ground (App (Op bvULe) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvULe) ?x ?y) (Sort Bool))"),
        rewrite!("bvULe-any"; "any" => "(Inhabitant Free (App (Op bvULe) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvUGt-inst-ground"; "(Ground (App (Op bvUGt) ?x ?y))" => "(Ground (App (Op bvUGt) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvUGt-inst"; "(Ground (App (Op bvUGt) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvUGt) ?x ?y) (Sort Bool))"),
        rewrite!("bvUGt-any"; "any" => "(Inhabitant Free (App (Op bvUGt) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvUGe-inst-ground"; "(Ground (App (Op bvUGe) ?x ?y))" => "(Ground (App (Op bvUGe) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvUGe-inst"; "(Ground (App (Op bvUGe) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvUGe) ?x ?y) (Sort Bool))"),
        rewrite!("bvUGe-any"; "any" => "(Inhabitant Free (App (Op bvUGe) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvSLt-inst-ground"; "(Ground (App (Op bvSLt) ?x ?y))" => "(Ground (App (Op bvSLt) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSLt-inst"; "(Ground (App (Op bvSLt) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvSLt) ?x ?y) (Sort Bool))"),
        rewrite!("bvSLt-any"; "any" => "(Inhabitant Free (App (Op bvSLt) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvSLe-inst-ground"; "(Ground (App (Op bvSLe) ?x ?y))" => "(Ground (App (Op bvSLe) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSLe-inst"; "(Ground (App (Op bvSLe) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvSLe) ?x ?y) (Sort Bool))"),
        rewrite!("bvSLe-any"; "any" => "(Inhabitant Free (App (Op bvSLe) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvSGt-inst-ground"; "(Ground (App (Op bvSGt) ?x ?y))" => "(Ground (App (Op bvSGt) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSGt-inst"; "(Ground (App (Op bvSGt) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvSGt) ?x ?y) (Sort Bool))"),
        rewrite!("bvSGt-any"; "any" => "(Inhabitant Free (App (Op bvSGt) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvSGe-inst-ground"; "(Ground (App (Op bvSGe) ?x ?y))" => "(Ground (App (Op bvSGe) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSGe-inst"; "(Ground (App (Op bvSGe) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvSGe) ?x ?y) (Sort Bool))"),
        rewrite!("bvSGe-any"; "any" => "(Inhabitant Free (App (Op bvSGe) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("bvComp-inst-ground"; "(Ground (App (Op bvComp) ?x ?y))" => "(Ground (App (Op bvComp) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvComp-inst"; "(Ground (App (Op bvComp) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op bvComp) ?x ?y) (Sort Bool))"),
        rewrite!("bvComp-any"; "any" => "(Inhabitant Free (App (Op bvComp) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("strInRe-inst-ground"; "(Ground (App (Op strInRe) ?x ?y))" => "(Ground (App (Op strInRe) (Ground ?x) (Ground ?y)))"),
        rewrite!("strInRe-inst"; "(Ground (App (Op strInRe) (Inhabitant ?a ?x ?s) ?y))" => "(Inhabitant ?a (App (Op strInRe) ?x ?y) (Sort Bool))"),
        rewrite!("strInRe-any"; "any" => "(Inhabitant Free (App (Op strInRe) (Ground any) (Ground any)) (Sort Bool))"),
        rewrite!("add-int-inst-ground"; "(Ground (App (Op add) ?x ?y))" => "(Ground (App (Op add) (Ground ?x) (Ground ?y)))"),
        rewrite!("add-int-inst"; "(Ground (App (Op add) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op add) ?x ?y) (Sort Int))"),
        rewrite!("add-int-any"; "any" => "(Inhabitant Free (App (Op add) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("add-real-inst-ground"; "(Ground (App (Op add) ?x ?y))" => "(Ground (App (Op add) (Ground ?x) (Ground ?y)))"),
        rewrite!("add-real-inst"; "(Ground (App (Op add) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op add) ?x ?y) (Sort Real))"),
        rewrite!("add-real-any"; "any" => "(Inhabitant Free (App (Op add) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("sub-int-inst-ground"; "(Ground (App (Op sub) ?x ?y))" => "(Ground (App (Op sub) (Ground ?x) (Ground ?y)))"),
        rewrite!("sub-int-inst"; "(Ground (App (Op sub) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op sub) ?x ?y) (Sort Int))"),
        rewrite!("sub-int-any"; "any" => "(Inhabitant Free (App (Op sub) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("sub-real-inst-ground"; "(Ground (App (Op sub) ?x ?y))" => "(Ground (App (Op sub) (Ground ?x) (Ground ?y)))"),
        rewrite!("sub-real-inst"; "(Ground (App (Op sub) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op sub) ?x ?y) (Sort Real))"),
        rewrite!("sub-real-any"; "any" => "(Inhabitant Free (App (Op sub) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("mult-int-inst-ground"; "(Ground (App (Op mult) ?x ?y))" => "(Ground (App (Op mult) (Ground ?x) (Ground ?y)))"),
        rewrite!("mult-int-inst"; "(Ground (App (Op mult) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op mult) ?x ?y) (Sort Int))"),
        rewrite!("mult-int-any"; "any" => "(Inhabitant Free (App (Op mult) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("mult-real-inst-ground"; "(Ground (App (Op mult) ?x ?y))" => "(Ground (App (Op mult) (Ground ?x) (Ground ?y)))"),
        rewrite!("mult-real-inst"; "(Ground (App (Op mult) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op mult) ?x ?y) (Sort Real))"),
        rewrite!("mult-real-any"; "any" => "(Inhabitant Free (App (Op mult) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("intDiv-int-inst-ground"; "(Ground (App (Op intDiv) ?x ?y))" => "(Ground (App (Op intDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("intDiv-int-inst"; "(Ground (App (Op intDiv) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op intDiv) ?x ?y) (Sort Int))"),
        rewrite!("intDiv-int-any"; "any" => "(Inhabitant Free (App (Op intDiv) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("intDiv-real-inst-ground"; "(Ground (App (Op intDiv) ?x ?y))" => "(Ground (App (Op intDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("intDiv-real-inst"; "(Ground (App (Op intDiv) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op intDiv) ?x ?y) (Sort Real))"),
        rewrite!("intDiv-real-any"; "any" => "(Inhabitant Free (App (Op intDiv) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("realDiv-int-inst-ground"; "(Ground (App (Op realDiv) ?x ?y))" => "(Ground (App (Op realDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("realDiv-int-inst"; "(Ground (App (Op realDiv) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op realDiv) ?x ?y) (Sort Int))"),
        rewrite!("realDiv-int-any"; "any" => "(Inhabitant Free (App (Op realDiv) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("realDiv-real-inst-ground"; "(Ground (App (Op realDiv) ?x ?y))" => "(Ground (App (Op realDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("realDiv-real-inst"; "(Ground (App (Op realDiv) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op realDiv) ?x ?y) (Sort Real))"),
        rewrite!("realDiv-real-any"; "any" => "(Inhabitant Free (App (Op realDiv) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("mod-int-inst-ground"; "(Ground (App (Op mod) ?x ?y))" => "(Ground (App (Op mod) (Ground ?x) (Ground ?y)))"),
        rewrite!("mod-int-inst"; "(Ground (App (Op mod) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op mod) ?x ?y) (Sort Int))"),
        rewrite!("mod-int-any"; "any" => "(Inhabitant Free (App (Op mod) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("mod-real-inst-ground"; "(Ground (App (Op mod) ?x ?y))" => "(Ground (App (Op mod) (Ground ?x) (Ground ?y)))"),
        rewrite!("mod-real-inst"; "(Ground (App (Op mod) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op mod) ?x ?y) (Sort Real))"),
        rewrite!("mod-real-any"; "any" => "(Inhabitant Free (App (Op mod) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("abs-int-inst-ground"; "(Ground (App (Op abs) ?x ?y))" => "(Ground (App (Op abs) (Ground ?x) (Ground ?y)))"),
        rewrite!("abs-int-inst"; "(Ground (App (Op abs) (Inhabitant ?a ?x (Sort Int)) ?y))" => "(Inhabitant ?a (App (Op abs) ?x ?y) (Sort Int))"),
        rewrite!("abs-int-any"; "any" => "(Inhabitant Free (App (Op abs) (Ground any) (Ground any)) (Sort Int))"),
        rewrite!("abs-real-inst-ground"; "(Ground (App (Op abs) ?x ?y))" => "(Ground (App (Op abs) (Ground ?x) (Ground ?y)))"),
        rewrite!("abs-real-inst"; "(Ground (App (Op abs) (Inhabitant ?a ?x (Sort Real)) ?y))" => "(Inhabitant ?a (App (Op abs) ?x ?y) (Sort Real))"),
        rewrite!("abs-real-any"; "any" => "(Inhabitant Free (App (Op abs) (Ground any) (Ground any)) (Sort Real))"),
        rewrite!("toReal-inst-ground"; "(Ground (App (Op toReal) ?x))" => "(Ground (App (Op toReal) (Ground ?x)))"),
        rewrite!("toReal-inst"; "(Ground (App (Op toReal) (Inhabitant ?a ?x (Sort Int))))" => "(Inhabitant ?a (App (Op toReal) ?x) (Sort Real))"),
        rewrite!("toReal-any"; "any" => "(Inhabitant Free (App (Op toReal) (Ground any)) (Sort Real))"),
        rewrite!("toInt-inst-ground"; "(Ground (App (Op toInt) ?x))" => "(Ground (App (Op toInt) (Ground ?x)))"),
        rewrite!("toInt-inst"; "(Ground (App (Op toInt) (Inhabitant ?a ?x (Sort Real))))" => "(Inhabitant ?a (App (Op toInt) ?x) (Sort Int))"),
        rewrite!("toInt-any"; "any" => "(Inhabitant Free (App (Op toInt) (Ground any)) (Sort Int))"),
        rewrite!("isInt-inst-ground"; "(Ground (App (Op isInt) ?x))" => "(Ground (App (Op isInt) (Ground ?x)))"),
        rewrite!("isInt-inst"; "(Ground (App (Op isInt) (Inhabitant ?a ?x (Sort Real))))" => "(Inhabitant ?a (App (Op isInt) ?x) (Sort Bool))"),
        rewrite!("isInt-any"; "any" => "(Inhabitant Free (App (Op isInt) (Ground any)) (Sort Bool))"),
        rewrite!("strConcat-inst-ground"; "(Ground (App (Op strConcat) ?x))" => "(Ground (App (Op strConcat) (Ground ?x)))"),
        rewrite!("strConcat-inst"; "(Ground (App (Op strConcat) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op strConcat) ?x) (Sort String))"),
        rewrite!("strConcat-any"; "any" => "(Inhabitant Free (App (Op strConcat) (Ground any)) (Sort String))"),
        rewrite!("substring-inst-ground"; "(Ground (App (Op substring) ?x))" => "(Ground (App (Op substring) (Ground ?x)))"),
        rewrite!("substring-inst"; "(Ground (App (Op substring) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op substring) ?x) (Sort String))"),
        rewrite!("substring-any"; "any" => "(Inhabitant Free (App (Op substring) (Ground any)) (Sort String))"),
        rewrite!("replace-inst-ground"; "(Ground (App (Op replace) ?x))" => "(Ground (App (Op replace) (Ground ?x)))"),
        rewrite!("replace-inst"; "(Ground (App (Op replace) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op replace) ?x) (Sort String))"),
        rewrite!("replace-any"; "any" => "(Inhabitant Free (App (Op replace) (Ground any)) (Sort String))"),
        rewrite!("replaceAll-inst-ground"; "(Ground (App (Op replaceAll) ?x))" => "(Ground (App (Op replaceAll) (Ground ?x)))"),
        rewrite!("replaceAll-inst"; "(Ground (App (Op replaceAll) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op replaceAll) ?x) (Sort String))"),
        rewrite!("replaceAll-any"; "any" => "(Inhabitant Free (App (Op replaceAll) (Ground any)) (Sort String))"),
        rewrite!("strFromCode-inst-ground"; "(Ground (App (Op strFromCode) ?x))" => "(Ground (App (Op strFromCode) (Ground ?x)))"),
        rewrite!("strFromCode-inst"; "(Ground (App (Op strFromCode) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op strFromCode) ?x) (Sort String))"),
        rewrite!("strFromCode-any"; "any" => "(Inhabitant Free (App (Op strFromCode) (Ground any)) (Sort String))"),
        rewrite!("strFromInt-inst-ground"; "(Ground (App (Op strFromInt) ?x))" => "(Ground (App (Op strFromInt) (Ground ?x)))"),
        rewrite!("strFromInt-inst"; "(Ground (App (Op strFromInt) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op strFromInt) ?x) (Sort String))"),
        rewrite!("strFromInt-any"; "any" => "(Inhabitant Free (App (Op strFromInt) (Ground any)) (Sort String))"),
        rewrite!("strToRe-inst-ground"; "(Ground (App (Op strToRe) ?x))" => "(Ground (App (Op strToRe) (Ground ?x)))"),
        rewrite!("strToRe-inst"; "(Ground (App (Op strToRe) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op strToRe) ?x) (Sort RegLan))"),
        rewrite!("strToRe-any"; "any" => "(Inhabitant Free (App (Op strToRe) (Ground any)) (Sort RegLan))"),
        rewrite!("strLen-inst-ground"; "(Ground (App (Op strLen) ?x))" => "(Ground (App (Op strLen) (Ground ?x)))"),
        rewrite!("strLen-inst"; "(Ground (App (Op strLen) (Inhabitant ?a ?x (Sort Int))))" => "(Inhabitant ?a (App (Op strLen) ?x) (Sort Int))"),
        rewrite!("strLen-any"; "any" => "(Inhabitant Free (App (Op strLen) (Ground any)) (Sort Int))"),
        rewrite!("strToCode-inst-ground"; "(Ground (App (Op strToCode) ?x))" => "(Ground (App (Op strToCode) (Ground ?x)))"),
        rewrite!("strToCode-inst"; "(Ground (App (Op strToCode) (Inhabitant ?a ?x (Sort Int))))" => "(Inhabitant ?a (App (Op strToCode) ?x) (Sort Int))"),
        rewrite!("strToCode-any"; "any" => "(Inhabitant Free (App (Op strToCode) (Ground any)) (Sort Int))"),
        rewrite!("strToInt-inst-ground"; "(Ground (App (Op strToInt) ?x))" => "(Ground (App (Op strToInt) (Ground ?x)))"),
        rewrite!("strToInt-inst"; "(Ground (App (Op strToInt) (Inhabitant ?a ?x (Sort Int))))" => "(Inhabitant ?a (App (Op strToInt) ?x) (Sort Int))"),
        rewrite!("strToInt-any"; "any" => "(Inhabitant Free (App (Op strToInt) (Ground any)) (Sort Int))"),
        rewrite!("strIsDigit-inst-ground"; "(Ground (App (Op strIsDigit) ?x))" => "(Ground (App (Op strIsDigit) (Ground ?x)))"),
        rewrite!("strIsDigit-inst"; "(Ground (App (Op strIsDigit) (Inhabitant ?a ?x (Sort Bool))))" => "(Inhabitant ?a (App (Op strIsDigit) ?x) (Sort Bool))"),
        rewrite!("strIsDigit-any"; "any" => "(Inhabitant Free (App (Op strIsDigit) (Ground any)) (Sort Bool))"),
        rewrite!("reConcat-inst-ground"; "(Ground (App (Op reConcat) ?x))" => "(Ground (App (Op reConcat) (Ground ?x)))"),
        rewrite!("reConcat-inst"; "(Ground (App (Op reConcat) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reConcat) ?x) (Sort RegLan))"),
        rewrite!("reConcat-any"; "any" => "(Inhabitant Free (App (Op reConcat) (Ground any)) (Sort RegLan))"),
        rewrite!("reUnion-inst-ground"; "(Ground (App (Op reUnion) ?x))" => "(Ground (App (Op reUnion) (Ground ?x)))"),
        rewrite!("reUnion-inst"; "(Ground (App (Op reUnion) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reUnion) ?x) (Sort RegLan))"),
        rewrite!("reUnion-any"; "any" => "(Inhabitant Free (App (Op reUnion) (Ground any)) (Sort RegLan))"),
        rewrite!("reIntersection-inst-ground"; "(Ground (App (Op reIntersection) ?x))" => "(Ground (App (Op reIntersection) (Ground ?x)))"),
        rewrite!("reIntersection-inst"; "(Ground (App (Op reIntersection) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reIntersection) ?x) (Sort RegLan))"),
        rewrite!("reIntersection-any"; "any" => "(Inhabitant Free (App (Op reIntersection) (Ground any)) (Sort RegLan))"),
        rewrite!("reDiff-inst-ground"; "(Ground (App (Op reDiff) ?x))" => "(Ground (App (Op reDiff) (Ground ?x)))"),
        rewrite!("reDiff-inst"; "(Ground (App (Op reDiff) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reDiff) ?x) (Sort RegLan))"),
        rewrite!("reDiff-any"; "any" => "(Inhabitant Free (App (Op reDiff) (Ground any)) (Sort RegLan))"),
        rewrite!("reKleeneClosure-inst-ground"; "(Ground (App (Op reKleeneClosure) ?x))" => "(Ground (App (Op reKleeneClosure) (Ground ?x)))"),
        rewrite!("reKleeneClosure-inst"; "(Ground (App (Op reKleeneClosure) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reKleeneClosure) ?x) (Sort RegLan))"),
        rewrite!("reKleeneClosure-any"; "any" => "(Inhabitant Free (App (Op reKleeneClosure) (Ground any)) (Sort RegLan))"),
        rewrite!("reComplement-inst-ground"; "(Ground (App (Op reComplement) ?x))" => "(Ground (App (Op reComplement) (Ground ?x)))"),
        rewrite!("reComplement-inst"; "(Ground (App (Op reComplement) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reComplement) ?x) (Sort RegLan))"),
        rewrite!("reComplement-any"; "any" => "(Inhabitant Free (App (Op reComplement) (Ground any)) (Sort RegLan))"),
        rewrite!("reKleeneCross-inst-ground"; "(Ground (App (Op reKleeneCross) ?x))" => "(Ground (App (Op reKleeneCross) (Ground ?x)))"),
        rewrite!("reKleeneCross-inst"; "(Ground (App (Op reKleeneCross) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reKleeneCross) ?x) (Sort RegLan))"),
        rewrite!("reKleeneCross-any"; "any" => "(Inhabitant Free (App (Op reKleeneCross) (Ground any)) (Sort RegLan))"),
        rewrite!("reOption-inst-ground"; "(Ground (App (Op reOption) ?x))" => "(Ground (App (Op reOption) (Ground ?x)))"),
        rewrite!("reOption-inst"; "(Ground (App (Op reOption) (Inhabitant ?a ?x (Sort RegLan))))" => "(Inhabitant ?a (App (Op reOption) ?x) (Sort RegLan))"),
        rewrite!("reOption-any"; "any" => "(Inhabitant Free (App (Op reOption) (Ground any)) (Sort RegLan))"),
        rewrite!("replaceRe-inst-ground"; "(Ground (App (Op replaceRe) ?x))" => "(Ground (App (Op replaceRe) (Ground ?x)))"),
        rewrite!("replaceRe-inst"; "(Ground (App (Op replaceRe) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op replaceRe) ?x) (Sort String))"),
        rewrite!("replaceRe-any"; "any" => "(Inhabitant Free (App (Op replaceRe) (Ground any)) (Sort String))"),
        rewrite!("replaceReAll-inst-ground"; "(Ground (App (Op replaceReAll) ?x))" => "(Ground (App (Op replaceReAll) (Ground ?x)))"),
        rewrite!("replaceReAll-inst"; "(Ground (App (Op replaceReAll) (Inhabitant ?a ?x (Sort String))))" => "(Inhabitant ?a (App (Op replaceReAll) ?x) (Sort String))"),
        rewrite!("replaceReAll-any"; "any" => "(Inhabitant Free (App (Op replaceReAll) (Ground any)) (Sort String))"),
        rewrite!("bvAdd-bitvec-inst-ground"; "(Ground (App (Op bvAdd) ?x ?y))" => "(Ground (App (Op bvAdd) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvAdd-bitvec-inst"; "(Ground (App (Op bvAdd) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvAdd) ?x ?y) (Sort BitVec))"),
        rewrite!("bvAdd-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvAdd) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvMul-bitvec-inst-ground"; "(Ground (App (Op bvMul) ?x ?y))" => "(Ground (App (Op bvMul) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvMul-bitvec-inst"; "(Ground (App (Op bvMul) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvMul) ?x ?y) (Sort BitVec))"),
        rewrite!("bvMul-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvMul) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvAnd-bitvec-inst-ground"; "(Ground (App (Op bvAnd) ?x ?y))" => "(Ground (App (Op bvAnd) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvAnd-bitvec-inst"; "(Ground (App (Op bvAnd) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvAnd) ?x ?y) (Sort BitVec))"),
        rewrite!("bvAnd-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvAnd) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvOr-bitvec-inst-ground"; "(Ground (App (Op bvOr) ?x ?y))" => "(Ground (App (Op bvOr) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvOr-bitvec-inst"; "(Ground (App (Op bvOr) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvOr) ?x ?y) (Sort BitVec))"),
        rewrite!("bvOr-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvOr) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvXor-bitvec-inst-ground"; "(Ground (App (Op bvXor) ?x ?y))" => "(Ground (App (Op bvXor) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvXor-bitvec-inst"; "(Ground (App (Op bvXor) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvXor) ?x ?y) (Sort BitVec))"),
        rewrite!("bvXor-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvXor) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvUDiv-bitvec-inst-ground"; "(Ground (App (Op bvUDiv) ?x ?y))" => "(Ground (App (Op bvUDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvUDiv-bitvec-inst"; "(Ground (App (Op bvUDiv) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvUDiv) ?x ?y) (Sort BitVec))"),
        rewrite!("bvUDiv-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvUDiv) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvURem-bitvec-inst-ground"; "(Ground (App (Op bvURem) ?x ?y))" => "(Ground (App (Op bvURem) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvURem-bitvec-inst"; "(Ground (App (Op bvURem) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvURem) ?x ?y) (Sort BitVec))"),
        rewrite!("bvURem-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvURem) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvShl-bitvec-inst-ground"; "(Ground (App (Op bvShl) ?x ?y))" => "(Ground (App (Op bvShl) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvShl-bitvec-inst"; "(Ground (App (Op bvShl) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvShl) ?x ?y) (Sort BitVec))"),
        rewrite!("bvShl-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvShl) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvLShr-bitvec-inst-ground"; "(Ground (App (Op bvLShr) ?x ?y))" => "(Ground (App (Op bvLShr) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvLShr-bitvec-inst"; "(Ground (App (Op bvLShr) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvLShr) ?x ?y) (Sort BitVec))"),
        rewrite!("bvLShr-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvLShr) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvNAnd-bitvec-inst-ground"; "(Ground (App (Op bvNAnd) ?x ?y))" => "(Ground (App (Op bvNAnd) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvNAnd-bitvec-inst"; "(Ground (App (Op bvNAnd) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvNAnd) ?x ?y) (Sort BitVec))"),
        rewrite!("bvNAnd-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvNAnd) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvNOr-bitvec-inst-ground"; "(Ground (App (Op bvNOr) ?x ?y))" => "(Ground (App (Op bvNOr) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvNOr-bitvec-inst"; "(Ground (App (Op bvNOr) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvNOr) ?x ?y) (Sort BitVec))"),
        rewrite!("bvNOr-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvNOr) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvXNor-bitvec-inst-ground"; "(Ground (App (Op bvXNor) ?x ?y))" => "(Ground (App (Op bvXNor) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvXNor-bitvec-inst"; "(Ground (App (Op bvXNor) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvXNor) ?x ?y) (Sort BitVec))"),
        rewrite!("bvXNor-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvXNor) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvSub-bitvec-inst-ground"; "(Ground (App (Op bvSub) ?x ?y))" => "(Ground (App (Op bvSub) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSub-bitvec-inst"; "(Ground (App (Op bvSub) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvSub) ?x ?y) (Sort BitVec))"),
        rewrite!("bvSub-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvSub) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvSDiv-bitvec-inst-ground"; "(Ground (App (Op bvSDiv) ?x ?y))" => "(Ground (App (Op bvSDiv) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSDiv-bitvec-inst"; "(Ground (App (Op bvSDiv) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvSDiv) ?x ?y) (Sort BitVec))"),
        rewrite!("bvSDiv-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvSDiv) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvSRem-bitvec-inst-ground"; "(Ground (App (Op bvSRem) ?x ?y))" => "(Ground (App (Op bvSRem) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSRem-bitvec-inst"; "(Ground (App (Op bvSRem) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvSRem) ?x ?y) (Sort BitVec))"),
        rewrite!("bvSRem-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvSRem) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvSMod-bitvec-inst-ground"; "(Ground (App (Op bvSMod) ?x ?y))" => "(Ground (App (Op bvSMod) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvSMod-bitvec-inst"; "(Ground (App (Op bvSMod) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvSMod) ?x ?y) (Sort BitVec))"),
        rewrite!("bvSMod-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvSMod) (Ground any) (Ground any)) (Sort BitVec))"),
        rewrite!("bvAShr-bitvec-inst-ground"; "(Ground (App (Op bvAShr) ?x ?y))" => "(Ground (App (Op bvAShr) (Ground ?x) (Ground ?y)))"),
        rewrite!("bvAShr-bitvec-inst"; "(Ground (App (Op bvAShr) (Inhabitant ?a ?x (Sort BitVec)) ?y))" => "(Inhabitant ?a (App (Op bvAShr) ?x ?y) (Sort BitVec))"),
        rewrite!("bvAShr-bitvec-any"; "any" => "(Inhabitant Free (App (Op bvAShr) (Ground any) (Ground any)) (Sort BitVec))"),
        // rewrite!("bvConcat-inst-ground"; "(Ground (App (Op bvConcat) ?xs))" => "(Ground (App (Op bvConcat) (GroundList ?xs)))"),
        // rewrite!("bvConcat-inst"; "(Ground (App (Op bvConcat) ?left (Inhabitant ?a ?mid (Sort Bool)) ?right))" => "(Inhabitant ?a (App (Op bvConcat) ?left ?mid ?right) (Sort Bool))"),
        // rewrite!("bvConcat-any"; "any" => "(Inhabitant Free (App (Op bvConcat) (Ground any) (Ground any)) (Sort Bool))"),
]);
